import os
import time
import openai
import vk_api
from dotenv import load_dotenv
from vk_api.longpoll import VkLongPoll, VkEventType

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
vk_token = os.getenv("VK_API_TOKEN")
assistant_id = os.getenv("OPENAI_ASSISTANT_ID")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK
vk_session = vk_api.VkApi(token=vk_token)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

# –ü–∞–º—è—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_last_message_time = {}
user_threads = {}  # üßµ –°–æ—Ö—Ä–∞–Ω—è–µ–º thread_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ user_id
RESPONSE_COOLDOWN = 5  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏

def send_vk_message(user_id, text):
    vk.messages.send(
        user_id=user_id,
        message=text,
        random_id=int(time.time() * 1000000)
    )

print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ...")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        user_id = event.user_id
        user_msg = event.text.strip()
        now = time.time()
        last_time = user_last_message_time.get(user_id, 0)

        # ‚è≥ –ê–Ω—Ç–∏—Ñ–ª—É–¥
        if now - last_time < RESPONSE_COOLDOWN:
            continue

        # ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º—É—Å–æ—Ä
        if len(user_msg) < 3 or all(c in ",.?!<>|\\/ " for c in user_msg):
            continue

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
        if "–º—É—Ä–∑–∏–∫" not in user_msg.lower():
            continue

        user_last_message_time[user_id] = now

        try:
            # üßµ –°–æ–∑–¥–∞—ë–º –≤–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
            if user_id not in user_threads:
                thread = openai.beta.threads.create()
                thread_id = thread.id
                user_threads[user_id] = thread_id
            else:
                thread_id = user_threads[user_id]

            # ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥
            openai.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=user_msg
            )

            # ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            run = openai.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=assistant_id
            )

            # ‚è± –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while True:
                run_status = openai.beta.threads.runs.retrieve(
                    thread_id=thread_id,
                    run_id=run.id
                )
                if run_status.status == "completed":
                    break
                time.sleep(1)

            # üì© –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            messages = openai.beta.threads.messages.list(thread_id=thread_id)
            reply = messages.data[0].content[0].text.value
            send_vk_message(user_id, reply)

        except Exception as e:
            send_vk_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
