import os
import time
from openai import OpenAI          # ‚úÖ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

# üîê –ö–ª—é—á–∏ –∏ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
client       = OpenAI()                            # OPENAI_API_KEY —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ env
vk_token     = os.getenv("VK_API_TOKEN")
assistant_id = os.getenv("OPENAI_ASSISTANT_ID")

if not vk_token or not assistant_id:
    raise ValueError("‚ùå –ù–µ—Ç VK_API_TOKEN –∏–ª–∏ OPENAI_ASSISTANT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway")

# ü§ñ VK + long-poll
vk_session = vk_api.VkApi(token=vk_token)
vk         = vk_session.get_api()
longpoll   = VkLongPoll(vk_session)

# ‚öôÔ∏è –∞–Ω—Ç–∏—Ñ–ª—É–¥ –∏ –∫—ç—à —Ç—Ä–µ–¥–æ–≤
user_last_message_time = {}
user_threads           = {}
RESPONSE_COOLDOWN      = 5  # —Å–µ–∫—É–Ω–¥

def send_vk_message(user_id: int, text: str):
    vk.messages.send(user_id=user_id,
                     message=text,
                     random_id=int(time.time() * 1_000_000))

print("üü¢ –ú—É—Ä–∑–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ‚Ä¶")

# üîÅ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        user_id  = event.user_id
        user_msg = event.text.strip()

        if len(user_msg) < 3 or "–º—É—Ä–∑–∏–∫" not in user_msg.lower():
            continue

        now, last = time.time(), user_last_message_time.get(user_id, 0)
        if now - last < RESPONSE_COOLDOWN:
            continue
        user_last_message_time[user_id] = now

        try:
            # üßµ –æ–¥–∏–Ω thread –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            thread_id = user_threads.setdefault(
                user_id, client.beta.threads.create().id
            )

            client.beta.threads.messages.create(
                thread_id=thread_id, role="user", content=user_msg
            )

            run = client.beta.threads.runs.create(
                thread_id=thread_id, assistant_id=assistant_id
            )

            # ‚è≥ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            while client.beta.threads.runs.retrieve(
                thread_id=thread_id, run_id=run.id
            ).status != "completed":
                time.sleep(1)

            reply = client.beta.threads.messages.list(
                thread_id=thread_id
            ).data[0].content[0].text.value

            send_vk_message(user_id, reply)

        except Exception as e:
            send_vk_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print("‚ùå –û—à–∏–±–∫–∞:", e)
