import os
import time
from openai import OpenAI
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

client = OpenAI()
vk_token     = os.getenv("VK_API_TOKEN")
assistant_id = os.getenv("OPENAI_ASSISTANT_ID")

if not vk_token or not assistant_id:
    raise ValueError("‚ùå –ù–µ—Ç VK_API_TOKEN –∏–ª–∏ OPENAI_ASSISTANT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway")

vk_session = vk_api.VkApi(token=vk_token)
vk         = vk_session.get_api()
longpoll   = VkLongPoll(vk_session)

user_last_message_time = {}
user_threads           = {}
active_users           = {}    # user_id: last_active_time
RESPONSE_COOLDOWN      = 5  # —Å–µ–∫—É–Ω–¥
SESSION_TIMEOUT        = 30 * 60  # 30 –º–∏–Ω—É—Ç

def send_vk_message(user_id: int, text: str):
    vk.messages.send(user_id=user_id,
                     message=text,
                     random_id=int(time.time() * 1_000_000))

def is_active(user_id):
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –∏—Å—Ç—ë–∫ timeout
    if user_id in active_users:
        if time.time() - active_users[user_id] < SESSION_TIMEOUT:
            return True
        else:
            del active_users[user_id]
    return False

print("üü¢ –ú—É—Ä–∑–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ‚Ä¶")

for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        user_id  = event.user_id
        user_msg = event.text.strip()

        now, last = time.time(), user_last_message_time.get(user_id, 0)
        if now - last < RESPONSE_COOLDOWN:
            continue
        user_last_message_time[user_id] = now

        # ‚Äî‚Äî‚Äî –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ‚Äî‚Äî‚Äî
        if is_active(user_id):
            # ‚Äú–°–¢–û–ü‚Äù –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é
            if user_msg.lower() in ["—Å—Ç–æ–ø", "–ø–æ–∫–∞", "–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è"]:
                del active_users[user_id]
                send_vk_message(user_id, "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ '–ú—É—Ä–∑–∏–∫'.")
                continue
            else:
                active_users[user_id] = now  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        else:
            if "–º—É—Ä–∑–∏–∫" in user_msg.lower():
                active_users[user_id] = now
                send_vk_message(user_id, "–ú—É—Ä–∑–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ '–°—Ç–æ–ø' –∏–ª–∏ '–ü–æ–∫–∞'.")
            else:
                # –ï—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
                continue

        try:
            # üßµ –æ–¥–∏–Ω thread –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            thread_id = user_threads.setdefault(
                user_id, client.beta.threads.create().id
            )

            client.beta.threads.messages.create(
                thread_id=thread_id, role="user", content=user_msg
            )

            run = client.beta.threads.runs.create(
                thread_id=thread_id, assistant_id=assistant_id
            )

            while client.beta.threads.runs.retrieve(
                thread_id=thread_id, run_id=run.id
            ).status != "completed":
                time.sleep(1)

            reply = client.beta.threads.messages.list(
                thread_id=thread_id
            ).data[0].content[0].text.value

            send_vk_message(user_id, reply)

        except Exception as e:
            send_vk_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print("‚ùå –û—à–∏–±–∫–∞:", e)
