import os
import time
import asyncio
from openai import OpenAI
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from telegram import Bot

client = OpenAI()
vk_token     = os.getenv("VK_API_TOKEN")
assistant_id = os.getenv("OPENAI_ASSISTANT_ID")

# Telegram
tg_bot_token = os.getenv("TG_BOT_TOKEN")
maxim_chat_id = os.getenv("MAXIM_CHAT_ID")
tg_bot = Bot(token=tg_bot_token)

if not vk_token or not assistant_id:
    raise ValueError("‚ùå –ù–µ—Ç VK_API_TOKEN –∏–ª–∏ OPENAI_ASSISTANT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway")
if not tg_bot_token or not maxim_chat_id:
    raise ValueError("‚ùå –ù–µ—Ç TG_BOT_TOKEN –∏–ª–∏ MAXIM_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway")

vk_session = vk_api.VkApi(token=vk_token)
vk         = vk_session.get_api()
longpoll   = VkLongPoll(vk_session)

user_last_message_time = {}
user_threads           = {}
active_users           = {}
RESPONSE_COOLDOWN      = 5
SESSION_TIMEOUT        = 30 * 60

def send_vk_message(user_id: int, text: str):
    vk.messages.send(user_id=user_id,
                     message=text,
                     random_id=int(time.time() * 1_000_000))

def send_telegram_message(chat_id, text):
    async def _send():
        await tg_bot.send_message(chat_id=chat_id, text=text)
    try:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å event loop (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—ã –≥–¥–µ-—Ç–æ –≤–Ω—É—Ç—Ä–∏ async-–∫–æ–¥–∞)
        asyncio.get_running_loop().create_task(_send())
    except RuntimeError:
        # –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—à—å –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ sync-–∫–æ–¥–∞
        asyncio.run(_send())

def is_active(user_id):
    if user_id in active_users:
        if time.time() - active_users[user_id] < SESSION_TIMEOUT:
            return True
        else:
            del active_users[user_id]
    return False

PING_PHRASES = [
    "–ø–æ–∑–æ–≤–∏ –º–∞–∫—Å–∏–º–∞", "–ø–æ–∑–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞", "–∑–æ–≤–∏—Ç–µ –º–∞–∫—Å–∏–º–∞",
    "–ø–æ–∑–≤–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", "–ø–æ–∑–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"
]

print("üü¢ –ú—É—Ä–∑–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ‚Ä¶")

for event in longpoll.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        user_id  = event.user_id
        user_msg = event.text.strip()

        now, last = time.time(), user_last_message_time.get(user_id, 0)
        if now - last < RESPONSE_COOLDOWN:
            continue
        user_last_message_time[user_id] = now

        if any(phrase in user_msg.lower() for phrase in PING_PHRASES):
            send_telegram_message(
                maxim_chat_id,
                f"–í–∞—Å –∑–æ–≤—É—Ç –≤ —á–∞—Ç–∏–∫–µ VK!\nUser: vk.com/id{user_id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {user_msg}"
            )
            send_vk_message(
                user_id,
                "–ú–∞–∫—Å–∏–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ–Ω —Å–∫–æ—Ä–æ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º. –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ '–ú—É—Ä–∑–∏–∫'"
            )
            if user_id in active_users:
                del active_users[user_id]
            continue

        if is_active(user_id):
            if user_msg.lower() in ["—Å—Ç–æ–ø", "–ø–æ–∫–∞", "–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è"]:
                del active_users[user_id]
                send_vk_message(user_id, "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ '–ú—É—Ä–∑–∏–∫'.")
                continue
            else:
                active_users[user_id] = now
        else:
            if "–º—É—Ä–∑–∏–∫" in user_msg.lower():
                active_users[user_id] = now
                send_vk_message(user_id, "–ú—É—Ä–∑–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ '–°—Ç–æ–ø' –∏–ª–∏ '–ü–æ–∫–∞'.")
            else:
                continue

        try:
            thread_id = user_threads.setdefault(
                user_id, client.beta.threads.create().id
            )
            client.beta.threads.messages.create(
                thread_id=thread_id, role="user", content=user_msg
            )
            run = client.beta.threads.runs.create(
                thread_id=thread_id, assistant_id=assistant_id
            )
            while client.beta.threads.runs.retrieve(
                thread_id=thread_id, run_id=run.id
            ).status != "completed":
                time.sleep(1)
            reply = client.beta.threads.messages.list(
                thread_id=thread_id
            ).data[0].content[0].text.value
            send_vk_message(user_id, reply)
        except Exception as e:
            send_vk_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print("‚ùå –û—à–∏–±–∫–∞:", e)
